// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/pjrt/distributed/protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fpjrt_2fdistributed_2fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fpjrt_2fdistributed_2fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xla_2fpjrt_2fdistributed_2fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xla_2fpjrt_2fdistributed_2fprotocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xla_2fpjrt_2fdistributed_2fprotocol_2eproto;
namespace xla {
class DeviceProto;
struct DeviceProtoDefaultTypeInternal;
extern DeviceProtoDefaultTypeInternal _DeviceProto_default_instance_;
class GlobalTopologyProto;
struct GlobalTopologyProtoDefaultTypeInternal;
extern GlobalTopologyProtoDefaultTypeInternal _GlobalTopologyProto_default_instance_;
class LocalTopologyProto;
struct LocalTopologyProtoDefaultTypeInternal;
extern LocalTopologyProtoDefaultTypeInternal _LocalTopologyProto_default_instance_;
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> ::xla::DeviceProto* Arena::CreateMaybeMessage<::xla::DeviceProto>(Arena*);
template<> ::xla::GlobalTopologyProto* Arena::CreateMaybeMessage<::xla::GlobalTopologyProto>(Arena*);
template<> ::xla::LocalTopologyProto* Arena::CreateMaybeMessage<::xla::LocalTopologyProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xla {

// ===================================================================

class DeviceProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.DeviceProto) */ {
 public:
  inline DeviceProto() : DeviceProto(nullptr) {}
  ~DeviceProto() override;
  explicit PROTOBUF_CONSTEXPR DeviceProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceProto(const DeviceProto& from);
  DeviceProto(DeviceProto&& from) noexcept
    : DeviceProto() {
    *this = ::std::move(from);
  }

  inline DeviceProto& operator=(const DeviceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceProto& operator=(DeviceProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceProto* internal_default_instance() {
    return reinterpret_cast<const DeviceProto*>(
               &_DeviceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceProto& a, DeviceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeviceProto& from) {
    DeviceProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.DeviceProto";
  }
  protected:
  explicit DeviceProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kVendorFieldNumber = 3,
    kComputeCapabilityFieldNumber = 6,
    kLocalDeviceOrdinalFieldNumber = 1,
    kGlobalDeviceIdFieldNumber = 4,
    kSliceIndexFieldNumber = 5,
    kCoreCountFieldNumber = 7,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string vendor = 3;
  void clear_vendor();
  const std::string& vendor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vendor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vendor();
  PROTOBUF_NODISCARD std::string* release_vendor();
  void set_allocated_vendor(std::string* vendor);
  private:
  const std::string& _internal_vendor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor(const std::string& value);
  std::string* _internal_mutable_vendor();
  public:

  // string compute_capability = 6;
  void clear_compute_capability();
  const std::string& compute_capability() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compute_capability(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compute_capability();
  PROTOBUF_NODISCARD std::string* release_compute_capability();
  void set_allocated_compute_capability(std::string* compute_capability);
  private:
  const std::string& _internal_compute_capability() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compute_capability(const std::string& value);
  std::string* _internal_mutable_compute_capability();
  public:

  // int32 local_device_ordinal = 1;
  void clear_local_device_ordinal();
  int32_t local_device_ordinal() const;
  void set_local_device_ordinal(int32_t value);
  private:
  int32_t _internal_local_device_ordinal() const;
  void _internal_set_local_device_ordinal(int32_t value);
  public:

  // int32 global_device_id = 4;
  void clear_global_device_id();
  int32_t global_device_id() const;
  void set_global_device_id(int32_t value);
  private:
  int32_t _internal_global_device_id() const;
  void _internal_set_global_device_id(int32_t value);
  public:

  // int32 slice_index = 5;
  void clear_slice_index();
  int32_t slice_index() const;
  void set_slice_index(int32_t value);
  private:
  int32_t _internal_slice_index() const;
  void _internal_set_slice_index(int32_t value);
  public:

  // int32 core_count = 7;
  void clear_core_count();
  int32_t core_count() const;
  void set_core_count(int32_t value);
  private:
  int32_t _internal_core_count() const;
  void _internal_set_core_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:xla.DeviceProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compute_capability_;
    int32_t local_device_ordinal_;
    int32_t global_device_id_;
    int32_t slice_index_;
    int32_t core_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fpjrt_2fdistributed_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class LocalTopologyProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.LocalTopologyProto) */ {
 public:
  inline LocalTopologyProto() : LocalTopologyProto(nullptr) {}
  ~LocalTopologyProto() override;
  explicit PROTOBUF_CONSTEXPR LocalTopologyProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalTopologyProto(const LocalTopologyProto& from);
  LocalTopologyProto(LocalTopologyProto&& from) noexcept
    : LocalTopologyProto() {
    *this = ::std::move(from);
  }

  inline LocalTopologyProto& operator=(const LocalTopologyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalTopologyProto& operator=(LocalTopologyProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalTopologyProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalTopologyProto* internal_default_instance() {
    return reinterpret_cast<const LocalTopologyProto*>(
               &_LocalTopologyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LocalTopologyProto& a, LocalTopologyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalTopologyProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalTopologyProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalTopologyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalTopologyProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalTopologyProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocalTopologyProto& from) {
    LocalTopologyProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalTopologyProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.LocalTopologyProto";
  }
  protected:
  explicit LocalTopologyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 3,
    kBootIdFieldNumber = 2,
    kNodeIdFieldNumber = 1,
  };
  // repeated .xla.DeviceProto devices = 3;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::xla::DeviceProto* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceProto >*
      mutable_devices();
  private:
  const ::xla::DeviceProto& _internal_devices(int index) const;
  ::xla::DeviceProto* _internal_add_devices();
  public:
  const ::xla::DeviceProto& devices(int index) const;
  ::xla::DeviceProto* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceProto >&
      devices() const;

  // string boot_id = 2;
  void clear_boot_id();
  const std::string& boot_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_boot_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_boot_id();
  PROTOBUF_NODISCARD std::string* release_boot_id();
  void set_allocated_boot_id(std::string* boot_id);
  private:
  const std::string& _internal_boot_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_boot_id(const std::string& value);
  std::string* _internal_mutable_boot_id();
  public:

  // int32 node_id = 1;
  void clear_node_id();
  int32_t node_id() const;
  void set_node_id(int32_t value);
  private:
  int32_t _internal_node_id() const;
  void _internal_set_node_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:xla.LocalTopologyProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceProto > devices_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boot_id_;
    int32_t node_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fpjrt_2fdistributed_2fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GlobalTopologyProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.GlobalTopologyProto) */ {
 public:
  inline GlobalTopologyProto() : GlobalTopologyProto(nullptr) {}
  ~GlobalTopologyProto() override;
  explicit PROTOBUF_CONSTEXPR GlobalTopologyProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobalTopologyProto(const GlobalTopologyProto& from);
  GlobalTopologyProto(GlobalTopologyProto&& from) noexcept
    : GlobalTopologyProto() {
    *this = ::std::move(from);
  }

  inline GlobalTopologyProto& operator=(const GlobalTopologyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalTopologyProto& operator=(GlobalTopologyProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GlobalTopologyProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalTopologyProto* internal_default_instance() {
    return reinterpret_cast<const GlobalTopologyProto*>(
               &_GlobalTopologyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GlobalTopologyProto& a, GlobalTopologyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalTopologyProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalTopologyProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GlobalTopologyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GlobalTopologyProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GlobalTopologyProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GlobalTopologyProto& from) {
    GlobalTopologyProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalTopologyProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.GlobalTopologyProto";
  }
  protected:
  explicit GlobalTopologyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .xla.LocalTopologyProto nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::xla::LocalTopologyProto* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::LocalTopologyProto >*
      mutable_nodes();
  private:
  const ::xla::LocalTopologyProto& _internal_nodes(int index) const;
  ::xla::LocalTopologyProto* _internal_add_nodes();
  public:
  const ::xla::LocalTopologyProto& nodes(int index) const;
  ::xla::LocalTopologyProto* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::LocalTopologyProto >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:xla.GlobalTopologyProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::LocalTopologyProto > nodes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fpjrt_2fdistributed_2fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceProto

// int32 local_device_ordinal = 1;
inline void DeviceProto::clear_local_device_ordinal() {
  _impl_.local_device_ordinal_ = 0;
}
inline int32_t DeviceProto::_internal_local_device_ordinal() const {
  return _impl_.local_device_ordinal_;
}
inline int32_t DeviceProto::local_device_ordinal() const {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.local_device_ordinal)
  return _internal_local_device_ordinal();
}
inline void DeviceProto::_internal_set_local_device_ordinal(int32_t value) {
  
  _impl_.local_device_ordinal_ = value;
}
inline void DeviceProto::set_local_device_ordinal(int32_t value) {
  _internal_set_local_device_ordinal(value);
  // @@protoc_insertion_point(field_set:xla.DeviceProto.local_device_ordinal)
}

// string name = 2;
inline void DeviceProto::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DeviceProto::name() const {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceProto::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.DeviceProto.name)
}
inline std::string* DeviceProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:xla.DeviceProto.name)
  return _s;
}
inline const std::string& DeviceProto::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DeviceProto::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceProto::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceProto::release_name() {
  // @@protoc_insertion_point(field_release:xla.DeviceProto.name)
  return _impl_.name_.Release();
}
inline void DeviceProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.DeviceProto.name)
}

// string vendor = 3;
inline void DeviceProto::clear_vendor() {
  _impl_.vendor_.ClearToEmpty();
}
inline const std::string& DeviceProto::vendor() const {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.vendor)
  return _internal_vendor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceProto::set_vendor(ArgT0&& arg0, ArgT... args) {
 
 _impl_.vendor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.DeviceProto.vendor)
}
inline std::string* DeviceProto::mutable_vendor() {
  std::string* _s = _internal_mutable_vendor();
  // @@protoc_insertion_point(field_mutable:xla.DeviceProto.vendor)
  return _s;
}
inline const std::string& DeviceProto::_internal_vendor() const {
  return _impl_.vendor_.Get();
}
inline void DeviceProto::_internal_set_vendor(const std::string& value) {
  
  _impl_.vendor_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceProto::_internal_mutable_vendor() {
  
  return _impl_.vendor_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceProto::release_vendor() {
  // @@protoc_insertion_point(field_release:xla.DeviceProto.vendor)
  return _impl_.vendor_.Release();
}
inline void DeviceProto::set_allocated_vendor(std::string* vendor) {
  if (vendor != nullptr) {
    
  } else {
    
  }
  _impl_.vendor_.SetAllocated(vendor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vendor_.IsDefault()) {
    _impl_.vendor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.DeviceProto.vendor)
}

// int32 global_device_id = 4;
inline void DeviceProto::clear_global_device_id() {
  _impl_.global_device_id_ = 0;
}
inline int32_t DeviceProto::_internal_global_device_id() const {
  return _impl_.global_device_id_;
}
inline int32_t DeviceProto::global_device_id() const {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.global_device_id)
  return _internal_global_device_id();
}
inline void DeviceProto::_internal_set_global_device_id(int32_t value) {
  
  _impl_.global_device_id_ = value;
}
inline void DeviceProto::set_global_device_id(int32_t value) {
  _internal_set_global_device_id(value);
  // @@protoc_insertion_point(field_set:xla.DeviceProto.global_device_id)
}

// int32 slice_index = 5;
inline void DeviceProto::clear_slice_index() {
  _impl_.slice_index_ = 0;
}
inline int32_t DeviceProto::_internal_slice_index() const {
  return _impl_.slice_index_;
}
inline int32_t DeviceProto::slice_index() const {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.slice_index)
  return _internal_slice_index();
}
inline void DeviceProto::_internal_set_slice_index(int32_t value) {
  
  _impl_.slice_index_ = value;
}
inline void DeviceProto::set_slice_index(int32_t value) {
  _internal_set_slice_index(value);
  // @@protoc_insertion_point(field_set:xla.DeviceProto.slice_index)
}

// string compute_capability = 6;
inline void DeviceProto::clear_compute_capability() {
  _impl_.compute_capability_.ClearToEmpty();
}
inline const std::string& DeviceProto::compute_capability() const {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.compute_capability)
  return _internal_compute_capability();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceProto::set_compute_capability(ArgT0&& arg0, ArgT... args) {
 
 _impl_.compute_capability_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.DeviceProto.compute_capability)
}
inline std::string* DeviceProto::mutable_compute_capability() {
  std::string* _s = _internal_mutable_compute_capability();
  // @@protoc_insertion_point(field_mutable:xla.DeviceProto.compute_capability)
  return _s;
}
inline const std::string& DeviceProto::_internal_compute_capability() const {
  return _impl_.compute_capability_.Get();
}
inline void DeviceProto::_internal_set_compute_capability(const std::string& value) {
  
  _impl_.compute_capability_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceProto::_internal_mutable_compute_capability() {
  
  return _impl_.compute_capability_.Mutable(GetArenaForAllocation());
}
inline std::string* DeviceProto::release_compute_capability() {
  // @@protoc_insertion_point(field_release:xla.DeviceProto.compute_capability)
  return _impl_.compute_capability_.Release();
}
inline void DeviceProto::set_allocated_compute_capability(std::string* compute_capability) {
  if (compute_capability != nullptr) {
    
  } else {
    
  }
  _impl_.compute_capability_.SetAllocated(compute_capability, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.compute_capability_.IsDefault()) {
    _impl_.compute_capability_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.DeviceProto.compute_capability)
}

// int32 core_count = 7;
inline void DeviceProto::clear_core_count() {
  _impl_.core_count_ = 0;
}
inline int32_t DeviceProto::_internal_core_count() const {
  return _impl_.core_count_;
}
inline int32_t DeviceProto::core_count() const {
  // @@protoc_insertion_point(field_get:xla.DeviceProto.core_count)
  return _internal_core_count();
}
inline void DeviceProto::_internal_set_core_count(int32_t value) {
  
  _impl_.core_count_ = value;
}
inline void DeviceProto::set_core_count(int32_t value) {
  _internal_set_core_count(value);
  // @@protoc_insertion_point(field_set:xla.DeviceProto.core_count)
}

// -------------------------------------------------------------------

// LocalTopologyProto

// int32 node_id = 1;
inline void LocalTopologyProto::clear_node_id() {
  _impl_.node_id_ = 0;
}
inline int32_t LocalTopologyProto::_internal_node_id() const {
  return _impl_.node_id_;
}
inline int32_t LocalTopologyProto::node_id() const {
  // @@protoc_insertion_point(field_get:xla.LocalTopologyProto.node_id)
  return _internal_node_id();
}
inline void LocalTopologyProto::_internal_set_node_id(int32_t value) {
  
  _impl_.node_id_ = value;
}
inline void LocalTopologyProto::set_node_id(int32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:xla.LocalTopologyProto.node_id)
}

// string boot_id = 2;
inline void LocalTopologyProto::clear_boot_id() {
  _impl_.boot_id_.ClearToEmpty();
}
inline const std::string& LocalTopologyProto::boot_id() const {
  // @@protoc_insertion_point(field_get:xla.LocalTopologyProto.boot_id)
  return _internal_boot_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalTopologyProto::set_boot_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.boot_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xla.LocalTopologyProto.boot_id)
}
inline std::string* LocalTopologyProto::mutable_boot_id() {
  std::string* _s = _internal_mutable_boot_id();
  // @@protoc_insertion_point(field_mutable:xla.LocalTopologyProto.boot_id)
  return _s;
}
inline const std::string& LocalTopologyProto::_internal_boot_id() const {
  return _impl_.boot_id_.Get();
}
inline void LocalTopologyProto::_internal_set_boot_id(const std::string& value) {
  
  _impl_.boot_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalTopologyProto::_internal_mutable_boot_id() {
  
  return _impl_.boot_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LocalTopologyProto::release_boot_id() {
  // @@protoc_insertion_point(field_release:xla.LocalTopologyProto.boot_id)
  return _impl_.boot_id_.Release();
}
inline void LocalTopologyProto::set_allocated_boot_id(std::string* boot_id) {
  if (boot_id != nullptr) {
    
  } else {
    
  }
  _impl_.boot_id_.SetAllocated(boot_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.boot_id_.IsDefault()) {
    _impl_.boot_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xla.LocalTopologyProto.boot_id)
}

// repeated .xla.DeviceProto devices = 3;
inline int LocalTopologyProto::_internal_devices_size() const {
  return _impl_.devices_.size();
}
inline int LocalTopologyProto::devices_size() const {
  return _internal_devices_size();
}
inline void LocalTopologyProto::clear_devices() {
  _impl_.devices_.Clear();
}
inline ::xla::DeviceProto* LocalTopologyProto::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:xla.LocalTopologyProto.devices)
  return _impl_.devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceProto >*
LocalTopologyProto::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:xla.LocalTopologyProto.devices)
  return &_impl_.devices_;
}
inline const ::xla::DeviceProto& LocalTopologyProto::_internal_devices(int index) const {
  return _impl_.devices_.Get(index);
}
inline const ::xla::DeviceProto& LocalTopologyProto::devices(int index) const {
  // @@protoc_insertion_point(field_get:xla.LocalTopologyProto.devices)
  return _internal_devices(index);
}
inline ::xla::DeviceProto* LocalTopologyProto::_internal_add_devices() {
  return _impl_.devices_.Add();
}
inline ::xla::DeviceProto* LocalTopologyProto::add_devices() {
  ::xla::DeviceProto* _add = _internal_add_devices();
  // @@protoc_insertion_point(field_add:xla.LocalTopologyProto.devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::DeviceProto >&
LocalTopologyProto::devices() const {
  // @@protoc_insertion_point(field_list:xla.LocalTopologyProto.devices)
  return _impl_.devices_;
}

// -------------------------------------------------------------------

// GlobalTopologyProto

// repeated .xla.LocalTopologyProto nodes = 1;
inline int GlobalTopologyProto::_internal_nodes_size() const {
  return _impl_.nodes_.size();
}
inline int GlobalTopologyProto::nodes_size() const {
  return _internal_nodes_size();
}
inline void GlobalTopologyProto::clear_nodes() {
  _impl_.nodes_.Clear();
}
inline ::xla::LocalTopologyProto* GlobalTopologyProto::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:xla.GlobalTopologyProto.nodes)
  return _impl_.nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::LocalTopologyProto >*
GlobalTopologyProto::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:xla.GlobalTopologyProto.nodes)
  return &_impl_.nodes_;
}
inline const ::xla::LocalTopologyProto& GlobalTopologyProto::_internal_nodes(int index) const {
  return _impl_.nodes_.Get(index);
}
inline const ::xla::LocalTopologyProto& GlobalTopologyProto::nodes(int index) const {
  // @@protoc_insertion_point(field_get:xla.GlobalTopologyProto.nodes)
  return _internal_nodes(index);
}
inline ::xla::LocalTopologyProto* GlobalTopologyProto::_internal_add_nodes() {
  return _impl_.nodes_.Add();
}
inline ::xla::LocalTopologyProto* GlobalTopologyProto::add_nodes() {
  ::xla::LocalTopologyProto* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:xla.GlobalTopologyProto.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::LocalTopologyProto >&
GlobalTopologyProto::nodes() const {
  // @@protoc_insertion_point(field_list:xla.GlobalTopologyProto.nodes)
  return _impl_.nodes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xla

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xla_2fpjrt_2fdistributed_2fprotocol_2eproto
