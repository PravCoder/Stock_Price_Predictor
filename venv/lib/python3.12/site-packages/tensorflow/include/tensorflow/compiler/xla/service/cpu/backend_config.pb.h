// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xla/service/cpu/backend_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fcpu_2fbackend_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fcpu_2fbackend_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xla_2fservice_2fcpu_2fbackend_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xla_2fservice_2fcpu_2fbackend_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xla_2fservice_2fcpu_2fbackend_5fconfig_2eproto;
namespace xla {
namespace cpu {
class BackendConfig;
struct BackendConfigDefaultTypeInternal;
extern BackendConfigDefaultTypeInternal _BackendConfig_default_instance_;
class OneDnnLayerNormConfig;
struct OneDnnLayerNormConfigDefaultTypeInternal;
extern OneDnnLayerNormConfigDefaultTypeInternal _OneDnnLayerNormConfig_default_instance_;
class OneDnnMatMulConfig;
struct OneDnnMatMulConfigDefaultTypeInternal;
extern OneDnnMatMulConfigDefaultTypeInternal _OneDnnMatMulConfig_default_instance_;
}  // namespace cpu
}  // namespace xla
PROTOBUF_NAMESPACE_OPEN
template<> ::xla::cpu::BackendConfig* Arena::CreateMaybeMessage<::xla::cpu::BackendConfig>(Arena*);
template<> ::xla::cpu::OneDnnLayerNormConfig* Arena::CreateMaybeMessage<::xla::cpu::OneDnnLayerNormConfig>(Arena*);
template<> ::xla::cpu::OneDnnMatMulConfig* Arena::CreateMaybeMessage<::xla::cpu::OneDnnMatMulConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xla {
namespace cpu {

enum OneDnnMatMulConfig_FusionKind : int {
  OneDnnMatMulConfig_FusionKind_UNDEFINED = 0,
  OneDnnMatMulConfig_FusionKind_BIAS = 1,
  OneDnnMatMulConfig_FusionKind_RELU = 2,
  OneDnnMatMulConfig_FusionKind_TANH = 3,
  OneDnnMatMulConfig_FusionKind_GELU_ERF = 4,
  OneDnnMatMulConfig_FusionKind_GELU_TANH = 5,
  OneDnnMatMulConfig_FusionKind_BINARY_ADD = 6,
  OneDnnMatMulConfig_FusionKind_LINEAR = 7,
  OneDnnMatMulConfig_FusionKind_ELU = 8,
  OneDnnMatMulConfig_FusionKind_RELU6 = 9,
  OneDnnMatMulConfig_FusionKind_SIGMOID = 10,
  OneDnnMatMulConfig_FusionKind_OneDnnMatMulConfig_FusionKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OneDnnMatMulConfig_FusionKind_OneDnnMatMulConfig_FusionKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OneDnnMatMulConfig_FusionKind_IsValid(int value);
constexpr OneDnnMatMulConfig_FusionKind OneDnnMatMulConfig_FusionKind_FusionKind_MIN = OneDnnMatMulConfig_FusionKind_UNDEFINED;
constexpr OneDnnMatMulConfig_FusionKind OneDnnMatMulConfig_FusionKind_FusionKind_MAX = OneDnnMatMulConfig_FusionKind_SIGMOID;
constexpr int OneDnnMatMulConfig_FusionKind_FusionKind_ARRAYSIZE = OneDnnMatMulConfig_FusionKind_FusionKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OneDnnMatMulConfig_FusionKind_descriptor();
template<typename T>
inline const std::string& OneDnnMatMulConfig_FusionKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OneDnnMatMulConfig_FusionKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OneDnnMatMulConfig_FusionKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OneDnnMatMulConfig_FusionKind_descriptor(), enum_t_value);
}
inline bool OneDnnMatMulConfig_FusionKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OneDnnMatMulConfig_FusionKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OneDnnMatMulConfig_FusionKind>(
    OneDnnMatMulConfig_FusionKind_descriptor(), name, value);
}
enum OneDnnLayerNormConfig_FusionKind : int {
  OneDnnLayerNormConfig_FusionKind_UNDEFINED = 0,
  OneDnnLayerNormConfig_FusionKind_SCALE = 1,
  OneDnnLayerNormConfig_FusionKind_SHIFT = 2,
  OneDnnLayerNormConfig_FusionKind_SCALE_AND_SHIFT = 3,
  OneDnnLayerNormConfig_FusionKind_OneDnnLayerNormConfig_FusionKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OneDnnLayerNormConfig_FusionKind_OneDnnLayerNormConfig_FusionKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OneDnnLayerNormConfig_FusionKind_IsValid(int value);
constexpr OneDnnLayerNormConfig_FusionKind OneDnnLayerNormConfig_FusionKind_FusionKind_MIN = OneDnnLayerNormConfig_FusionKind_UNDEFINED;
constexpr OneDnnLayerNormConfig_FusionKind OneDnnLayerNormConfig_FusionKind_FusionKind_MAX = OneDnnLayerNormConfig_FusionKind_SCALE_AND_SHIFT;
constexpr int OneDnnLayerNormConfig_FusionKind_FusionKind_ARRAYSIZE = OneDnnLayerNormConfig_FusionKind_FusionKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OneDnnLayerNormConfig_FusionKind_descriptor();
template<typename T>
inline const std::string& OneDnnLayerNormConfig_FusionKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OneDnnLayerNormConfig_FusionKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OneDnnLayerNormConfig_FusionKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OneDnnLayerNormConfig_FusionKind_descriptor(), enum_t_value);
}
inline bool OneDnnLayerNormConfig_FusionKind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OneDnnLayerNormConfig_FusionKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OneDnnLayerNormConfig_FusionKind>(
    OneDnnLayerNormConfig_FusionKind_descriptor(), name, value);
}
// ===================================================================

class BackendConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.cpu.BackendConfig) */ {
 public:
  inline BackendConfig() : BackendConfig(nullptr) {}
  ~BackendConfig() override;
  explicit PROTOBUF_CONSTEXPR BackendConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BackendConfig(const BackendConfig& from);
  BackendConfig(BackendConfig&& from) noexcept
    : BackendConfig() {
    *this = ::std::move(from);
  }

  inline BackendConfig& operator=(const BackendConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackendConfig& operator=(BackendConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BackendConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackendConfig* internal_default_instance() {
    return reinterpret_cast<const BackendConfig*>(
               &_BackendConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BackendConfig& a, BackendConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BackendConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackendConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackendConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BackendConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BackendConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BackendConfig& from) {
    BackendConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackendConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.cpu.BackendConfig";
  }
  protected:
  explicit BackendConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOuterDimensionPartitionsFieldNumber = 1,
    kOnednnMatmulConfigFieldNumber = 2,
    kOnednnLayerNormConfigFieldNumber = 3,
  };
  // repeated int64 outer_dimension_partitions = 1;
  int outer_dimension_partitions_size() const;
  private:
  int _internal_outer_dimension_partitions_size() const;
  public:
  void clear_outer_dimension_partitions();
  private:
  int64_t _internal_outer_dimension_partitions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_outer_dimension_partitions() const;
  void _internal_add_outer_dimension_partitions(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_outer_dimension_partitions();
  public:
  int64_t outer_dimension_partitions(int index) const;
  void set_outer_dimension_partitions(int index, int64_t value);
  void add_outer_dimension_partitions(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      outer_dimension_partitions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_outer_dimension_partitions();

  // .xla.cpu.OneDnnMatMulConfig onednn_matmul_config = 2;
  bool has_onednn_matmul_config() const;
  private:
  bool _internal_has_onednn_matmul_config() const;
  public:
  void clear_onednn_matmul_config();
  const ::xla::cpu::OneDnnMatMulConfig& onednn_matmul_config() const;
  PROTOBUF_NODISCARD ::xla::cpu::OneDnnMatMulConfig* release_onednn_matmul_config();
  ::xla::cpu::OneDnnMatMulConfig* mutable_onednn_matmul_config();
  void set_allocated_onednn_matmul_config(::xla::cpu::OneDnnMatMulConfig* onednn_matmul_config);
  private:
  const ::xla::cpu::OneDnnMatMulConfig& _internal_onednn_matmul_config() const;
  ::xla::cpu::OneDnnMatMulConfig* _internal_mutable_onednn_matmul_config();
  public:
  void unsafe_arena_set_allocated_onednn_matmul_config(
      ::xla::cpu::OneDnnMatMulConfig* onednn_matmul_config);
  ::xla::cpu::OneDnnMatMulConfig* unsafe_arena_release_onednn_matmul_config();

  // .xla.cpu.OneDnnLayerNormConfig onednn_layer_norm_config = 3;
  bool has_onednn_layer_norm_config() const;
  private:
  bool _internal_has_onednn_layer_norm_config() const;
  public:
  void clear_onednn_layer_norm_config();
  const ::xla::cpu::OneDnnLayerNormConfig& onednn_layer_norm_config() const;
  PROTOBUF_NODISCARD ::xla::cpu::OneDnnLayerNormConfig* release_onednn_layer_norm_config();
  ::xla::cpu::OneDnnLayerNormConfig* mutable_onednn_layer_norm_config();
  void set_allocated_onednn_layer_norm_config(::xla::cpu::OneDnnLayerNormConfig* onednn_layer_norm_config);
  private:
  const ::xla::cpu::OneDnnLayerNormConfig& _internal_onednn_layer_norm_config() const;
  ::xla::cpu::OneDnnLayerNormConfig* _internal_mutable_onednn_layer_norm_config();
  public:
  void unsafe_arena_set_allocated_onednn_layer_norm_config(
      ::xla::cpu::OneDnnLayerNormConfig* onednn_layer_norm_config);
  ::xla::cpu::OneDnnLayerNormConfig* unsafe_arena_release_onednn_layer_norm_config();

  // @@protoc_insertion_point(class_scope:xla.cpu.BackendConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > outer_dimension_partitions_;
    mutable std::atomic<int> _outer_dimension_partitions_cached_byte_size_;
    ::xla::cpu::OneDnnMatMulConfig* onednn_matmul_config_;
    ::xla::cpu::OneDnnLayerNormConfig* onednn_layer_norm_config_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fcpu_2fbackend_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class OneDnnMatMulConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.cpu.OneDnnMatMulConfig) */ {
 public:
  inline OneDnnMatMulConfig() : OneDnnMatMulConfig(nullptr) {}
  ~OneDnnMatMulConfig() override;
  explicit PROTOBUF_CONSTEXPR OneDnnMatMulConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneDnnMatMulConfig(const OneDnnMatMulConfig& from);
  OneDnnMatMulConfig(OneDnnMatMulConfig&& from) noexcept
    : OneDnnMatMulConfig() {
    *this = ::std::move(from);
  }

  inline OneDnnMatMulConfig& operator=(const OneDnnMatMulConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneDnnMatMulConfig& operator=(OneDnnMatMulConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneDnnMatMulConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneDnnMatMulConfig* internal_default_instance() {
    return reinterpret_cast<const OneDnnMatMulConfig*>(
               &_OneDnnMatMulConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OneDnnMatMulConfig& a, OneDnnMatMulConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OneDnnMatMulConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneDnnMatMulConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneDnnMatMulConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneDnnMatMulConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneDnnMatMulConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OneDnnMatMulConfig& from) {
    OneDnnMatMulConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneDnnMatMulConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.cpu.OneDnnMatMulConfig";
  }
  protected:
  explicit OneDnnMatMulConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OneDnnMatMulConfig_FusionKind FusionKind;
  static constexpr FusionKind UNDEFINED =
    OneDnnMatMulConfig_FusionKind_UNDEFINED;
  static constexpr FusionKind BIAS =
    OneDnnMatMulConfig_FusionKind_BIAS;
  static constexpr FusionKind RELU =
    OneDnnMatMulConfig_FusionKind_RELU;
  static constexpr FusionKind TANH =
    OneDnnMatMulConfig_FusionKind_TANH;
  static constexpr FusionKind GELU_ERF =
    OneDnnMatMulConfig_FusionKind_GELU_ERF;
  static constexpr FusionKind GELU_TANH =
    OneDnnMatMulConfig_FusionKind_GELU_TANH;
  static constexpr FusionKind BINARY_ADD =
    OneDnnMatMulConfig_FusionKind_BINARY_ADD;
  static constexpr FusionKind LINEAR =
    OneDnnMatMulConfig_FusionKind_LINEAR;
  static constexpr FusionKind ELU =
    OneDnnMatMulConfig_FusionKind_ELU;
  static constexpr FusionKind RELU6 =
    OneDnnMatMulConfig_FusionKind_RELU6;
  static constexpr FusionKind SIGMOID =
    OneDnnMatMulConfig_FusionKind_SIGMOID;
  static inline bool FusionKind_IsValid(int value) {
    return OneDnnMatMulConfig_FusionKind_IsValid(value);
  }
  static constexpr FusionKind FusionKind_MIN =
    OneDnnMatMulConfig_FusionKind_FusionKind_MIN;
  static constexpr FusionKind FusionKind_MAX =
    OneDnnMatMulConfig_FusionKind_FusionKind_MAX;
  static constexpr int FusionKind_ARRAYSIZE =
    OneDnnMatMulConfig_FusionKind_FusionKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FusionKind_descriptor() {
    return OneDnnMatMulConfig_FusionKind_descriptor();
  }
  template<typename T>
  static inline const std::string& FusionKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FusionKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FusionKind_Name.");
    return OneDnnMatMulConfig_FusionKind_Name(enum_t_value);
  }
  static inline bool FusionKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FusionKind* value) {
    return OneDnnMatMulConfig_FusionKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFusedOpsFieldNumber = 3,
    kTransposeAFieldNumber = 1,
    kTransposeBFieldNumber = 2,
    kBiasBroadcastFieldNumber = 4,
    kWeightsPrepackedFieldNumber = 6,
    kAlphaTypecastFieldNumber = 5,
    kUserScratchpadFieldNumber = 7,
  };
  // repeated .xla.cpu.OneDnnMatMulConfig.FusionKind fused_ops = 3;
  int fused_ops_size() const;
  private:
  int _internal_fused_ops_size() const;
  public:
  void clear_fused_ops();
  private:
  ::xla::cpu::OneDnnMatMulConfig_FusionKind _internal_fused_ops(int index) const;
  void _internal_add_fused_ops(::xla::cpu::OneDnnMatMulConfig_FusionKind value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_fused_ops();
  public:
  ::xla::cpu::OneDnnMatMulConfig_FusionKind fused_ops(int index) const;
  void set_fused_ops(int index, ::xla::cpu::OneDnnMatMulConfig_FusionKind value);
  void add_fused_ops(::xla::cpu::OneDnnMatMulConfig_FusionKind value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& fused_ops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_fused_ops();

  // bool transpose_a = 1;
  void clear_transpose_a();
  bool transpose_a() const;
  void set_transpose_a(bool value);
  private:
  bool _internal_transpose_a() const;
  void _internal_set_transpose_a(bool value);
  public:

  // bool transpose_b = 2;
  void clear_transpose_b();
  bool transpose_b() const;
  void set_transpose_b(bool value);
  private:
  bool _internal_transpose_b() const;
  void _internal_set_transpose_b(bool value);
  public:

  // bool bias_broadcast = 4;
  void clear_bias_broadcast();
  bool bias_broadcast() const;
  void set_bias_broadcast(bool value);
  private:
  bool _internal_bias_broadcast() const;
  void _internal_set_bias_broadcast(bool value);
  public:

  // bool weights_prepacked = 6;
  void clear_weights_prepacked();
  bool weights_prepacked() const;
  void set_weights_prepacked(bool value);
  private:
  bool _internal_weights_prepacked() const;
  void _internal_set_weights_prepacked(bool value);
  public:

  // int32 alpha_typecast = 5;
  void clear_alpha_typecast();
  int32_t alpha_typecast() const;
  void set_alpha_typecast(int32_t value);
  private:
  int32_t _internal_alpha_typecast() const;
  void _internal_set_alpha_typecast(int32_t value);
  public:

  // bool user_scratchpad = 7;
  void clear_user_scratchpad();
  bool user_scratchpad() const;
  void set_user_scratchpad(bool value);
  private:
  bool _internal_user_scratchpad() const;
  void _internal_set_user_scratchpad(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xla.cpu.OneDnnMatMulConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> fused_ops_;
    mutable std::atomic<int> _fused_ops_cached_byte_size_;
    bool transpose_a_;
    bool transpose_b_;
    bool bias_broadcast_;
    bool weights_prepacked_;
    int32_t alpha_typecast_;
    bool user_scratchpad_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fcpu_2fbackend_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class OneDnnLayerNormConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xla.cpu.OneDnnLayerNormConfig) */ {
 public:
  inline OneDnnLayerNormConfig() : OneDnnLayerNormConfig(nullptr) {}
  ~OneDnnLayerNormConfig() override;
  explicit PROTOBUF_CONSTEXPR OneDnnLayerNormConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneDnnLayerNormConfig(const OneDnnLayerNormConfig& from);
  OneDnnLayerNormConfig(OneDnnLayerNormConfig&& from) noexcept
    : OneDnnLayerNormConfig() {
    *this = ::std::move(from);
  }

  inline OneDnnLayerNormConfig& operator=(const OneDnnLayerNormConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneDnnLayerNormConfig& operator=(OneDnnLayerNormConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneDnnLayerNormConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneDnnLayerNormConfig* internal_default_instance() {
    return reinterpret_cast<const OneDnnLayerNormConfig*>(
               &_OneDnnLayerNormConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OneDnnLayerNormConfig& a, OneDnnLayerNormConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(OneDnnLayerNormConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneDnnLayerNormConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneDnnLayerNormConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneDnnLayerNormConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneDnnLayerNormConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OneDnnLayerNormConfig& from) {
    OneDnnLayerNormConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneDnnLayerNormConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xla.cpu.OneDnnLayerNormConfig";
  }
  protected:
  explicit OneDnnLayerNormConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OneDnnLayerNormConfig_FusionKind FusionKind;
  static constexpr FusionKind UNDEFINED =
    OneDnnLayerNormConfig_FusionKind_UNDEFINED;
  static constexpr FusionKind SCALE =
    OneDnnLayerNormConfig_FusionKind_SCALE;
  static constexpr FusionKind SHIFT =
    OneDnnLayerNormConfig_FusionKind_SHIFT;
  static constexpr FusionKind SCALE_AND_SHIFT =
    OneDnnLayerNormConfig_FusionKind_SCALE_AND_SHIFT;
  static inline bool FusionKind_IsValid(int value) {
    return OneDnnLayerNormConfig_FusionKind_IsValid(value);
  }
  static constexpr FusionKind FusionKind_MIN =
    OneDnnLayerNormConfig_FusionKind_FusionKind_MIN;
  static constexpr FusionKind FusionKind_MAX =
    OneDnnLayerNormConfig_FusionKind_FusionKind_MAX;
  static constexpr int FusionKind_ARRAYSIZE =
    OneDnnLayerNormConfig_FusionKind_FusionKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FusionKind_descriptor() {
    return OneDnnLayerNormConfig_FusionKind_descriptor();
  }
  template<typename T>
  static inline const std::string& FusionKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FusionKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FusionKind_Name.");
    return OneDnnLayerNormConfig_FusionKind_Name(enum_t_value);
  }
  static inline bool FusionKind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FusionKind* value) {
    return OneDnnLayerNormConfig_FusionKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFusedOpsFieldNumber = 1,
    kEpsilonTypecastFieldNumber = 2,
  };
  // .xla.cpu.OneDnnLayerNormConfig.FusionKind fused_ops = 1;
  void clear_fused_ops();
  ::xla::cpu::OneDnnLayerNormConfig_FusionKind fused_ops() const;
  void set_fused_ops(::xla::cpu::OneDnnLayerNormConfig_FusionKind value);
  private:
  ::xla::cpu::OneDnnLayerNormConfig_FusionKind _internal_fused_ops() const;
  void _internal_set_fused_ops(::xla::cpu::OneDnnLayerNormConfig_FusionKind value);
  public:

  // int32 epsilon_typecast = 2;
  void clear_epsilon_typecast();
  int32_t epsilon_typecast() const;
  void set_epsilon_typecast(int32_t value);
  private:
  int32_t _internal_epsilon_typecast() const;
  void _internal_set_epsilon_typecast(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:xla.cpu.OneDnnLayerNormConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int fused_ops_;
    int32_t epsilon_typecast_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_xla_2fservice_2fcpu_2fbackend_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BackendConfig

// repeated int64 outer_dimension_partitions = 1;
inline int BackendConfig::_internal_outer_dimension_partitions_size() const {
  return _impl_.outer_dimension_partitions_.size();
}
inline int BackendConfig::outer_dimension_partitions_size() const {
  return _internal_outer_dimension_partitions_size();
}
inline void BackendConfig::clear_outer_dimension_partitions() {
  _impl_.outer_dimension_partitions_.Clear();
}
inline int64_t BackendConfig::_internal_outer_dimension_partitions(int index) const {
  return _impl_.outer_dimension_partitions_.Get(index);
}
inline int64_t BackendConfig::outer_dimension_partitions(int index) const {
  // @@protoc_insertion_point(field_get:xla.cpu.BackendConfig.outer_dimension_partitions)
  return _internal_outer_dimension_partitions(index);
}
inline void BackendConfig::set_outer_dimension_partitions(int index, int64_t value) {
  _impl_.outer_dimension_partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.cpu.BackendConfig.outer_dimension_partitions)
}
inline void BackendConfig::_internal_add_outer_dimension_partitions(int64_t value) {
  _impl_.outer_dimension_partitions_.Add(value);
}
inline void BackendConfig::add_outer_dimension_partitions(int64_t value) {
  _internal_add_outer_dimension_partitions(value);
  // @@protoc_insertion_point(field_add:xla.cpu.BackendConfig.outer_dimension_partitions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
BackendConfig::_internal_outer_dimension_partitions() const {
  return _impl_.outer_dimension_partitions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
BackendConfig::outer_dimension_partitions() const {
  // @@protoc_insertion_point(field_list:xla.cpu.BackendConfig.outer_dimension_partitions)
  return _internal_outer_dimension_partitions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
BackendConfig::_internal_mutable_outer_dimension_partitions() {
  return &_impl_.outer_dimension_partitions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
BackendConfig::mutable_outer_dimension_partitions() {
  // @@protoc_insertion_point(field_mutable_list:xla.cpu.BackendConfig.outer_dimension_partitions)
  return _internal_mutable_outer_dimension_partitions();
}

// .xla.cpu.OneDnnMatMulConfig onednn_matmul_config = 2;
inline bool BackendConfig::_internal_has_onednn_matmul_config() const {
  return this != internal_default_instance() && _impl_.onednn_matmul_config_ != nullptr;
}
inline bool BackendConfig::has_onednn_matmul_config() const {
  return _internal_has_onednn_matmul_config();
}
inline void BackendConfig::clear_onednn_matmul_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.onednn_matmul_config_ != nullptr) {
    delete _impl_.onednn_matmul_config_;
  }
  _impl_.onednn_matmul_config_ = nullptr;
}
inline const ::xla::cpu::OneDnnMatMulConfig& BackendConfig::_internal_onednn_matmul_config() const {
  const ::xla::cpu::OneDnnMatMulConfig* p = _impl_.onednn_matmul_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::cpu::OneDnnMatMulConfig&>(
      ::xla::cpu::_OneDnnMatMulConfig_default_instance_);
}
inline const ::xla::cpu::OneDnnMatMulConfig& BackendConfig::onednn_matmul_config() const {
  // @@protoc_insertion_point(field_get:xla.cpu.BackendConfig.onednn_matmul_config)
  return _internal_onednn_matmul_config();
}
inline void BackendConfig::unsafe_arena_set_allocated_onednn_matmul_config(
    ::xla::cpu::OneDnnMatMulConfig* onednn_matmul_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onednn_matmul_config_);
  }
  _impl_.onednn_matmul_config_ = onednn_matmul_config;
  if (onednn_matmul_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.cpu.BackendConfig.onednn_matmul_config)
}
inline ::xla::cpu::OneDnnMatMulConfig* BackendConfig::release_onednn_matmul_config() {
  
  ::xla::cpu::OneDnnMatMulConfig* temp = _impl_.onednn_matmul_config_;
  _impl_.onednn_matmul_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::cpu::OneDnnMatMulConfig* BackendConfig::unsafe_arena_release_onednn_matmul_config() {
  // @@protoc_insertion_point(field_release:xla.cpu.BackendConfig.onednn_matmul_config)
  
  ::xla::cpu::OneDnnMatMulConfig* temp = _impl_.onednn_matmul_config_;
  _impl_.onednn_matmul_config_ = nullptr;
  return temp;
}
inline ::xla::cpu::OneDnnMatMulConfig* BackendConfig::_internal_mutable_onednn_matmul_config() {
  
  if (_impl_.onednn_matmul_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::cpu::OneDnnMatMulConfig>(GetArenaForAllocation());
    _impl_.onednn_matmul_config_ = p;
  }
  return _impl_.onednn_matmul_config_;
}
inline ::xla::cpu::OneDnnMatMulConfig* BackendConfig::mutable_onednn_matmul_config() {
  ::xla::cpu::OneDnnMatMulConfig* _msg = _internal_mutable_onednn_matmul_config();
  // @@protoc_insertion_point(field_mutable:xla.cpu.BackendConfig.onednn_matmul_config)
  return _msg;
}
inline void BackendConfig::set_allocated_onednn_matmul_config(::xla::cpu::OneDnnMatMulConfig* onednn_matmul_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onednn_matmul_config_;
  }
  if (onednn_matmul_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onednn_matmul_config);
    if (message_arena != submessage_arena) {
      onednn_matmul_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onednn_matmul_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.onednn_matmul_config_ = onednn_matmul_config;
  // @@protoc_insertion_point(field_set_allocated:xla.cpu.BackendConfig.onednn_matmul_config)
}

// .xla.cpu.OneDnnLayerNormConfig onednn_layer_norm_config = 3;
inline bool BackendConfig::_internal_has_onednn_layer_norm_config() const {
  return this != internal_default_instance() && _impl_.onednn_layer_norm_config_ != nullptr;
}
inline bool BackendConfig::has_onednn_layer_norm_config() const {
  return _internal_has_onednn_layer_norm_config();
}
inline void BackendConfig::clear_onednn_layer_norm_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.onednn_layer_norm_config_ != nullptr) {
    delete _impl_.onednn_layer_norm_config_;
  }
  _impl_.onednn_layer_norm_config_ = nullptr;
}
inline const ::xla::cpu::OneDnnLayerNormConfig& BackendConfig::_internal_onednn_layer_norm_config() const {
  const ::xla::cpu::OneDnnLayerNormConfig* p = _impl_.onednn_layer_norm_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::cpu::OneDnnLayerNormConfig&>(
      ::xla::cpu::_OneDnnLayerNormConfig_default_instance_);
}
inline const ::xla::cpu::OneDnnLayerNormConfig& BackendConfig::onednn_layer_norm_config() const {
  // @@protoc_insertion_point(field_get:xla.cpu.BackendConfig.onednn_layer_norm_config)
  return _internal_onednn_layer_norm_config();
}
inline void BackendConfig::unsafe_arena_set_allocated_onednn_layer_norm_config(
    ::xla::cpu::OneDnnLayerNormConfig* onednn_layer_norm_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onednn_layer_norm_config_);
  }
  _impl_.onednn_layer_norm_config_ = onednn_layer_norm_config;
  if (onednn_layer_norm_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xla.cpu.BackendConfig.onednn_layer_norm_config)
}
inline ::xla::cpu::OneDnnLayerNormConfig* BackendConfig::release_onednn_layer_norm_config() {
  
  ::xla::cpu::OneDnnLayerNormConfig* temp = _impl_.onednn_layer_norm_config_;
  _impl_.onednn_layer_norm_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::cpu::OneDnnLayerNormConfig* BackendConfig::unsafe_arena_release_onednn_layer_norm_config() {
  // @@protoc_insertion_point(field_release:xla.cpu.BackendConfig.onednn_layer_norm_config)
  
  ::xla::cpu::OneDnnLayerNormConfig* temp = _impl_.onednn_layer_norm_config_;
  _impl_.onednn_layer_norm_config_ = nullptr;
  return temp;
}
inline ::xla::cpu::OneDnnLayerNormConfig* BackendConfig::_internal_mutable_onednn_layer_norm_config() {
  
  if (_impl_.onednn_layer_norm_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::cpu::OneDnnLayerNormConfig>(GetArenaForAllocation());
    _impl_.onednn_layer_norm_config_ = p;
  }
  return _impl_.onednn_layer_norm_config_;
}
inline ::xla::cpu::OneDnnLayerNormConfig* BackendConfig::mutable_onednn_layer_norm_config() {
  ::xla::cpu::OneDnnLayerNormConfig* _msg = _internal_mutable_onednn_layer_norm_config();
  // @@protoc_insertion_point(field_mutable:xla.cpu.BackendConfig.onednn_layer_norm_config)
  return _msg;
}
inline void BackendConfig::set_allocated_onednn_layer_norm_config(::xla::cpu::OneDnnLayerNormConfig* onednn_layer_norm_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onednn_layer_norm_config_;
  }
  if (onednn_layer_norm_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onednn_layer_norm_config);
    if (message_arena != submessage_arena) {
      onednn_layer_norm_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onednn_layer_norm_config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.onednn_layer_norm_config_ = onednn_layer_norm_config;
  // @@protoc_insertion_point(field_set_allocated:xla.cpu.BackendConfig.onednn_layer_norm_config)
}

// -------------------------------------------------------------------

// OneDnnMatMulConfig

// bool transpose_a = 1;
inline void OneDnnMatMulConfig::clear_transpose_a() {
  _impl_.transpose_a_ = false;
}
inline bool OneDnnMatMulConfig::_internal_transpose_a() const {
  return _impl_.transpose_a_;
}
inline bool OneDnnMatMulConfig::transpose_a() const {
  // @@protoc_insertion_point(field_get:xla.cpu.OneDnnMatMulConfig.transpose_a)
  return _internal_transpose_a();
}
inline void OneDnnMatMulConfig::_internal_set_transpose_a(bool value) {
  
  _impl_.transpose_a_ = value;
}
inline void OneDnnMatMulConfig::set_transpose_a(bool value) {
  _internal_set_transpose_a(value);
  // @@protoc_insertion_point(field_set:xla.cpu.OneDnnMatMulConfig.transpose_a)
}

// bool transpose_b = 2;
inline void OneDnnMatMulConfig::clear_transpose_b() {
  _impl_.transpose_b_ = false;
}
inline bool OneDnnMatMulConfig::_internal_transpose_b() const {
  return _impl_.transpose_b_;
}
inline bool OneDnnMatMulConfig::transpose_b() const {
  // @@protoc_insertion_point(field_get:xla.cpu.OneDnnMatMulConfig.transpose_b)
  return _internal_transpose_b();
}
inline void OneDnnMatMulConfig::_internal_set_transpose_b(bool value) {
  
  _impl_.transpose_b_ = value;
}
inline void OneDnnMatMulConfig::set_transpose_b(bool value) {
  _internal_set_transpose_b(value);
  // @@protoc_insertion_point(field_set:xla.cpu.OneDnnMatMulConfig.transpose_b)
}

// repeated .xla.cpu.OneDnnMatMulConfig.FusionKind fused_ops = 3;
inline int OneDnnMatMulConfig::_internal_fused_ops_size() const {
  return _impl_.fused_ops_.size();
}
inline int OneDnnMatMulConfig::fused_ops_size() const {
  return _internal_fused_ops_size();
}
inline void OneDnnMatMulConfig::clear_fused_ops() {
  _impl_.fused_ops_.Clear();
}
inline ::xla::cpu::OneDnnMatMulConfig_FusionKind OneDnnMatMulConfig::_internal_fused_ops(int index) const {
  return static_cast< ::xla::cpu::OneDnnMatMulConfig_FusionKind >(_impl_.fused_ops_.Get(index));
}
inline ::xla::cpu::OneDnnMatMulConfig_FusionKind OneDnnMatMulConfig::fused_ops(int index) const {
  // @@protoc_insertion_point(field_get:xla.cpu.OneDnnMatMulConfig.fused_ops)
  return _internal_fused_ops(index);
}
inline void OneDnnMatMulConfig::set_fused_ops(int index, ::xla::cpu::OneDnnMatMulConfig_FusionKind value) {
  _impl_.fused_ops_.Set(index, value);
  // @@protoc_insertion_point(field_set:xla.cpu.OneDnnMatMulConfig.fused_ops)
}
inline void OneDnnMatMulConfig::_internal_add_fused_ops(::xla::cpu::OneDnnMatMulConfig_FusionKind value) {
  _impl_.fused_ops_.Add(value);
}
inline void OneDnnMatMulConfig::add_fused_ops(::xla::cpu::OneDnnMatMulConfig_FusionKind value) {
  _internal_add_fused_ops(value);
  // @@protoc_insertion_point(field_add:xla.cpu.OneDnnMatMulConfig.fused_ops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
OneDnnMatMulConfig::fused_ops() const {
  // @@protoc_insertion_point(field_list:xla.cpu.OneDnnMatMulConfig.fused_ops)
  return _impl_.fused_ops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
OneDnnMatMulConfig::_internal_mutable_fused_ops() {
  return &_impl_.fused_ops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
OneDnnMatMulConfig::mutable_fused_ops() {
  // @@protoc_insertion_point(field_mutable_list:xla.cpu.OneDnnMatMulConfig.fused_ops)
  return _internal_mutable_fused_ops();
}

// bool bias_broadcast = 4;
inline void OneDnnMatMulConfig::clear_bias_broadcast() {
  _impl_.bias_broadcast_ = false;
}
inline bool OneDnnMatMulConfig::_internal_bias_broadcast() const {
  return _impl_.bias_broadcast_;
}
inline bool OneDnnMatMulConfig::bias_broadcast() const {
  // @@protoc_insertion_point(field_get:xla.cpu.OneDnnMatMulConfig.bias_broadcast)
  return _internal_bias_broadcast();
}
inline void OneDnnMatMulConfig::_internal_set_bias_broadcast(bool value) {
  
  _impl_.bias_broadcast_ = value;
}
inline void OneDnnMatMulConfig::set_bias_broadcast(bool value) {
  _internal_set_bias_broadcast(value);
  // @@protoc_insertion_point(field_set:xla.cpu.OneDnnMatMulConfig.bias_broadcast)
}

// int32 alpha_typecast = 5;
inline void OneDnnMatMulConfig::clear_alpha_typecast() {
  _impl_.alpha_typecast_ = 0;
}
inline int32_t OneDnnMatMulConfig::_internal_alpha_typecast() const {
  return _impl_.alpha_typecast_;
}
inline int32_t OneDnnMatMulConfig::alpha_typecast() const {
  // @@protoc_insertion_point(field_get:xla.cpu.OneDnnMatMulConfig.alpha_typecast)
  return _internal_alpha_typecast();
}
inline void OneDnnMatMulConfig::_internal_set_alpha_typecast(int32_t value) {
  
  _impl_.alpha_typecast_ = value;
}
inline void OneDnnMatMulConfig::set_alpha_typecast(int32_t value) {
  _internal_set_alpha_typecast(value);
  // @@protoc_insertion_point(field_set:xla.cpu.OneDnnMatMulConfig.alpha_typecast)
}

// bool weights_prepacked = 6;
inline void OneDnnMatMulConfig::clear_weights_prepacked() {
  _impl_.weights_prepacked_ = false;
}
inline bool OneDnnMatMulConfig::_internal_weights_prepacked() const {
  return _impl_.weights_prepacked_;
}
inline bool OneDnnMatMulConfig::weights_prepacked() const {
  // @@protoc_insertion_point(field_get:xla.cpu.OneDnnMatMulConfig.weights_prepacked)
  return _internal_weights_prepacked();
}
inline void OneDnnMatMulConfig::_internal_set_weights_prepacked(bool value) {
  
  _impl_.weights_prepacked_ = value;
}
inline void OneDnnMatMulConfig::set_weights_prepacked(bool value) {
  _internal_set_weights_prepacked(value);
  // @@protoc_insertion_point(field_set:xla.cpu.OneDnnMatMulConfig.weights_prepacked)
}

// bool user_scratchpad = 7;
inline void OneDnnMatMulConfig::clear_user_scratchpad() {
  _impl_.user_scratchpad_ = false;
}
inline bool OneDnnMatMulConfig::_internal_user_scratchpad() const {
  return _impl_.user_scratchpad_;
}
inline bool OneDnnMatMulConfig::user_scratchpad() const {
  // @@protoc_insertion_point(field_get:xla.cpu.OneDnnMatMulConfig.user_scratchpad)
  return _internal_user_scratchpad();
}
inline void OneDnnMatMulConfig::_internal_set_user_scratchpad(bool value) {
  
  _impl_.user_scratchpad_ = value;
}
inline void OneDnnMatMulConfig::set_user_scratchpad(bool value) {
  _internal_set_user_scratchpad(value);
  // @@protoc_insertion_point(field_set:xla.cpu.OneDnnMatMulConfig.user_scratchpad)
}

// -------------------------------------------------------------------

// OneDnnLayerNormConfig

// .xla.cpu.OneDnnLayerNormConfig.FusionKind fused_ops = 1;
inline void OneDnnLayerNormConfig::clear_fused_ops() {
  _impl_.fused_ops_ = 0;
}
inline ::xla::cpu::OneDnnLayerNormConfig_FusionKind OneDnnLayerNormConfig::_internal_fused_ops() const {
  return static_cast< ::xla::cpu::OneDnnLayerNormConfig_FusionKind >(_impl_.fused_ops_);
}
inline ::xla::cpu::OneDnnLayerNormConfig_FusionKind OneDnnLayerNormConfig::fused_ops() const {
  // @@protoc_insertion_point(field_get:xla.cpu.OneDnnLayerNormConfig.fused_ops)
  return _internal_fused_ops();
}
inline void OneDnnLayerNormConfig::_internal_set_fused_ops(::xla::cpu::OneDnnLayerNormConfig_FusionKind value) {
  
  _impl_.fused_ops_ = value;
}
inline void OneDnnLayerNormConfig::set_fused_ops(::xla::cpu::OneDnnLayerNormConfig_FusionKind value) {
  _internal_set_fused_ops(value);
  // @@protoc_insertion_point(field_set:xla.cpu.OneDnnLayerNormConfig.fused_ops)
}

// int32 epsilon_typecast = 2;
inline void OneDnnLayerNormConfig::clear_epsilon_typecast() {
  _impl_.epsilon_typecast_ = 0;
}
inline int32_t OneDnnLayerNormConfig::_internal_epsilon_typecast() const {
  return _impl_.epsilon_typecast_;
}
inline int32_t OneDnnLayerNormConfig::epsilon_typecast() const {
  // @@protoc_insertion_point(field_get:xla.cpu.OneDnnLayerNormConfig.epsilon_typecast)
  return _internal_epsilon_typecast();
}
inline void OneDnnLayerNormConfig::_internal_set_epsilon_typecast(int32_t value) {
  
  _impl_.epsilon_typecast_ = value;
}
inline void OneDnnLayerNormConfig::set_epsilon_typecast(int32_t value) {
  _internal_set_epsilon_typecast(value);
  // @@protoc_insertion_point(field_set:xla.cpu.OneDnnLayerNormConfig.epsilon_typecast)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cpu
}  // namespace xla

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xla::cpu::OneDnnMatMulConfig_FusionKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xla::cpu::OneDnnMatMulConfig_FusionKind>() {
  return ::xla::cpu::OneDnnMatMulConfig_FusionKind_descriptor();
}
template <> struct is_proto_enum< ::xla::cpu::OneDnnLayerNormConfig_FusionKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xla::cpu::OneDnnLayerNormConfig_FusionKind>() {
  return ::xla::cpu::OneDnnLayerNormConfig_FusionKind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xla_2fservice_2fcpu_2fbackend_5fconfig_2eproto
